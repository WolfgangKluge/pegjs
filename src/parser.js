PEG.parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function parse_grammar() {
        var cacheKey = 'grammar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        result3 = parse___();
        if (result3 !== null) {
          result7 = parse_initializer();
          result4 = result7 !== null ? result7 : '';
          if (result4 !== null) {
            result6 = parse_rule();
            if (result6 !== null) {
              result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                result6 = parse_rule();
              }
            } else {
              result5 = null;
            }
            if (result5 !== null) {
              result1 = [result3, result4, result5];
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(initializer, rules) {
                var rulesConverted = {};
                rules.forEach(function(rule) { rulesConverted[rule.name] = rule; });
          
                return {
                  type:        "grammar",
                  initializer: initializer !== "" ? initializer : null,
                  rules:       rulesConverted,
                  startRule:   rules[0].name
                };
              })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_initializer() {
        var cacheKey = 'initializer@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        result3 = parse_action();
        if (result3 !== null) {
          result5 = parse_semicolon();
          result4 = result5 !== null ? result5 : '';
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(code) {
                return {
                  type: "initializer",
                  code: code
                };
              })(result1[0])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rule() {
        var cacheKey = 'rule@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        result3 = parse_identifier();
        if (result3 !== null) {
          result10 = parse_literal();
          if (result10 !== null) {
            result4 = result10;
          } else {
            if (input.substr(pos, 0) === "") {
              result9 = "";
              pos += 0;
            } else {
              result9 = null;
              if (reportFailures === 0) {
                matchFailed("\"\"");
              }
            }
            if (result9 !== null) {
              result4 = result9;
            } else {
              result4 = null;
            }
          }
          if (result4 !== null) {
            result5 = parse_equals();
            if (result5 !== null) {
              result6 = parse_choice();
              if (result6 !== null) {
                result8 = parse_semicolon();
                result7 = result8 !== null ? result8 : '';
                if (result7 !== null) {
                  result1 = [result3, result4, result5, result6, result7];
                } else {
                  result1 = null;
                  pos = savedPos1;
                }
              } else {
                result1 = null;
                pos = savedPos1;
              }
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(name, displayName, expression) {
                return {
                  type:        "rule",
                  name:        name,
                  displayName: displayName !== "" ? displayName : null,
                  expression:  expression
                };
              })(result1[0], result1[1], result1[3])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_choice() {
        var cacheKey = 'choice@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        result3 = parse_sequence();
        if (result3 !== null) {
          result4 = [];
          savedPos2 = pos;
          result6 = parse_slash();
          if (result6 !== null) {
            result7 = parse_sequence();
            if (result7 !== null) {
              result5 = [result6, result7];
            } else {
              result5 = null;
              pos = savedPos2;
            }
          } else {
            result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            savedPos2 = pos;
            result6 = parse_slash();
            if (result6 !== null) {
              result7 = parse_sequence();
              if (result7 !== null) {
                result5 = [result6, result7];
              } else {
                result5 = null;
                pos = savedPos2;
              }
            } else {
              result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(head, tail) {
                if (tail.length > 0) {
                  var alternatives = [head].concat(tail.map(
                      function(element) { return element[1]; }
                  ));
                  return {
                    type:         "choice",
                    alternatives: alternatives
                  };
                } else {
                  return head;
                }
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_sequence() {
        var cacheKey = 'sequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos1 = pos;
        savedPos2 = pos;
        result8 = [];
        result10 = parse_labeled();
        while (result10 !== null) {
          result8.push(result10);
          result10 = parse_labeled();
        }
        if (result8 !== null) {
          result9 = parse_action();
          if (result9 !== null) {
            result6 = [result8, result9];
          } else {
            result6 = null;
            pos = savedPos2;
          }
        } else {
          result6 = null;
          pos = savedPos2;
        }
        result7 = result6 !== null
          ? (function(elements, code) {
                var expression = elements.length !== 1
                  ? {
                      type:     "sequence",
                      elements: elements
                    }
                  : elements[0];
                return {
                  type:       "action",
                  expression: expression,
                  code:       code
                };
              })(result6[0], result6[1])
          : null;
        if (result7 !== null) {
          result5 = result7;
        } else {
          result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          result0 = result5;
        } else {
          savedPos0 = pos;
          result2 = [];
          result4 = parse_labeled();
          while (result4 !== null) {
            result2.push(result4);
            result4 = parse_labeled();
          }
          result3 = result2 !== null
            ? (function(elements) {
                  return elements.length !== 1
                    ? {
                        type:     "sequence",
                        elements: elements
                      }
                    : elements[0];
                })(result2)
            : null;
          if (result3 !== null) {
            result1 = result3;
          } else {
            result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            result0 = result1;
          } else {
            result0 = null;
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_labeled() {
        var cacheKey = 'labeled@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        result5 = parse_identifier();
        if (result5 !== null) {
          result6 = parse_colon();
          if (result6 !== null) {
            result7 = parse_prefixed();
            if (result7 !== null) {
              result3 = [result5, result6, result7];
            } else {
              result3 = null;
              pos = savedPos1;
            }
          } else {
            result3 = null;
            pos = savedPos1;
          }
        } else {
          result3 = null;
          pos = savedPos1;
        }
        result4 = result3 !== null
          ? (function(label, expression) {
                return {
                  type:       "labeled",
                  label:      label,
                  expression: expression
                };
              })(result3[0], result3[2])
          : null;
        if (result4 !== null) {
          result2 = result4;
        } else {
          result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          result0 = result2;
        } else {
          result1 = parse_prefixed();
          if (result1 !== null) {
            result0 = result1;
          } else {
            result0 = null;
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_prefixed() {
        var cacheKey = 'prefixed@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21;
        var savedPos0, savedPos1, savedPos2, savedPos3, savedPos4, savedPos5, savedPos6, savedPos7;
        
        
        savedPos6 = pos;
        savedPos7 = pos;
        result20 = parse_and();
        if (result20 !== null) {
          result21 = parse_action();
          if (result21 !== null) {
            result18 = [result20, result21];
          } else {
            result18 = null;
            pos = savedPos7;
          }
        } else {
          result18 = null;
          pos = savedPos7;
        }
        result19 = result18 !== null
          ? (function(code) {
                return {
                  type: "semantic_and",
                  code: code
                };
              })(result18[1])
          : null;
        if (result19 !== null) {
          result17 = result19;
        } else {
          result17 = null;
          pos = savedPos6;
        }
        if (result17 !== null) {
          result0 = result17;
        } else {
          savedPos4 = pos;
          savedPos5 = pos;
          result15 = parse_and();
          if (result15 !== null) {
            result16 = parse_suffixed();
            if (result16 !== null) {
              result13 = [result15, result16];
            } else {
              result13 = null;
              pos = savedPos5;
            }
          } else {
            result13 = null;
            pos = savedPos5;
          }
          result14 = result13 !== null
            ? (function(expression) {
                  return {
                    type:       "simple_and",
                    expression: expression
                  };
                })(result13[1])
            : null;
          if (result14 !== null) {
            result12 = result14;
          } else {
            result12 = null;
            pos = savedPos4;
          }
          if (result12 !== null) {
            result0 = result12;
          } else {
            savedPos2 = pos;
            savedPos3 = pos;
            result10 = parse_not();
            if (result10 !== null) {
              result11 = parse_action();
              if (result11 !== null) {
                result8 = [result10, result11];
              } else {
                result8 = null;
                pos = savedPos3;
              }
            } else {
              result8 = null;
              pos = savedPos3;
            }
            result9 = result8 !== null
              ? (function(code) {
                    return {
                      type: "semantic_not",
                      code: code
                    };
                  })(result8[1])
              : null;
            if (result9 !== null) {
              result7 = result9;
            } else {
              result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              result0 = result7;
            } else {
              savedPos0 = pos;
              savedPos1 = pos;
              result5 = parse_not();
              if (result5 !== null) {
                result6 = parse_suffixed();
                if (result6 !== null) {
                  result3 = [result5, result6];
                } else {
                  result3 = null;
                  pos = savedPos1;
                }
              } else {
                result3 = null;
                pos = savedPos1;
              }
              result4 = result3 !== null
                ? (function(expression) {
                      return {
                        type:       "simple_not",
                        expression: expression
                      };
                    })(result3[1])
                : null;
              if (result4 !== null) {
                result2 = result4;
              } else {
                result2 = null;
                pos = savedPos0;
              }
              if (result2 !== null) {
                result0 = result2;
              } else {
                result1 = parse_suffixed();
                if (result1 !== null) {
                  result0 = result1;
                } else {
                  result0 = null;
                }
              }
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_suffixed() {
        var cacheKey = 'suffixed@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16;
        var savedPos0, savedPos1, savedPos2, savedPos3, savedPos4, savedPos5;
        
        
        savedPos4 = pos;
        savedPos5 = pos;
        result15 = parse_primary();
        if (result15 !== null) {
          result16 = parse_question();
          if (result16 !== null) {
            result13 = [result15, result16];
          } else {
            result13 = null;
            pos = savedPos5;
          }
        } else {
          result13 = null;
          pos = savedPos5;
        }
        result14 = result13 !== null
          ? (function(expression) {
                return {
                  type:       "optional",
                  expression: expression
                };
              })(result13[0])
          : null;
        if (result14 !== null) {
          result12 = result14;
        } else {
          result12 = null;
          pos = savedPos4;
        }
        if (result12 !== null) {
          result0 = result12;
        } else {
          savedPos2 = pos;
          savedPos3 = pos;
          result10 = parse_primary();
          if (result10 !== null) {
            result11 = parse_star();
            if (result11 !== null) {
              result8 = [result10, result11];
            } else {
              result8 = null;
              pos = savedPos3;
            }
          } else {
            result8 = null;
            pos = savedPos3;
          }
          result9 = result8 !== null
            ? (function(expression) {
                  return {
                    type:       "zero_or_more",
                    expression: expression
                  };
                })(result8[0])
            : null;
          if (result9 !== null) {
            result7 = result9;
          } else {
            result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            result0 = result7;
          } else {
            savedPos0 = pos;
            savedPos1 = pos;
            result5 = parse_primary();
            if (result5 !== null) {
              result6 = parse_plus();
              if (result6 !== null) {
                result3 = [result5, result6];
              } else {
                result3 = null;
                pos = savedPos1;
              }
            } else {
              result3 = null;
              pos = savedPos1;
            }
            result4 = result3 !== null
              ? (function(expression) {
                    return {
                      type:       "one_or_more",
                      expression: expression
                    };
                  })(result3[0])
              : null;
            if (result4 !== null) {
              result2 = result4;
            } else {
              result2 = null;
              pos = savedPos0;
            }
            if (result2 !== null) {
              result0 = result2;
            } else {
              result1 = parse_primary();
              if (result1 !== null) {
                result0 = result1;
              } else {
                result0 = null;
              }
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary() {
        var cacheKey = 'primary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20, result21, result22, result23;
        var savedPos0, savedPos1, savedPos2, savedPos3, savedPos4, savedPos5, savedPos6, savedPos7;
        
        
        savedPos4 = pos;
        savedPos5 = pos;
        result17 = parse_identifier();
        if (result17 !== null) {
          savedPos6 = pos;
          reportFailures++;
          savedPos7 = pos;
          result23 = parse_literal();
          if (result23 !== null) {
            result20 = result23;
          } else {
            if (input.substr(pos, 0) === "") {
              result22 = "";
              pos += 0;
            } else {
              result22 = null;
              if (reportFailures === 0) {
                matchFailed("\"\"");
              }
            }
            if (result22 !== null) {
              result20 = result22;
            } else {
              result20 = null;
            }
          }
          if (result20 !== null) {
            result21 = parse_equals();
            if (result21 !== null) {
              result19 = [result20, result21];
            } else {
              result19 = null;
              pos = savedPos7;
            }
          } else {
            result19 = null;
            pos = savedPos7;
          }
          reportFailures--;
          if (result19 === null) {
            result18 = '';
          } else {
            result18 = null;
            pos = savedPos6;
          }
          if (result18 !== null) {
            result15 = [result17, result18];
          } else {
            result15 = null;
            pos = savedPos5;
          }
        } else {
          result15 = null;
          pos = savedPos5;
        }
        result16 = result15 !== null
          ? (function(name) {
                return {
                  type: "rule_ref",
                  name: name
                };
              })(result15[0])
          : null;
        if (result16 !== null) {
          result14 = result16;
        } else {
          result14 = null;
          pos = savedPos4;
        }
        if (result14 !== null) {
          result0 = result14;
        } else {
          savedPos3 = pos;
          result12 = parse_literal();
          result13 = result12 !== null
            ? (function(value) {
                  return {
                    type:  "literal",
                    value: value
                  };
                })(result12)
            : null;
          if (result13 !== null) {
            result11 = result13;
          } else {
            result11 = null;
            pos = savedPos3;
          }
          if (result11 !== null) {
            result0 = result11;
          } else {
            savedPos2 = pos;
            result9 = parse_dot();
            result10 = result9 !== null
              ? (function() { return { type: "any" }; })()
              : null;
            if (result10 !== null) {
              result8 = result10;
            } else {
              result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              result0 = result8;
            } else {
              result7 = parse_class();
              if (result7 !== null) {
                result0 = result7;
              } else {
                savedPos0 = pos;
                savedPos1 = pos;
                result4 = parse_lparen();
                if (result4 !== null) {
                  result5 = parse_choice();
                  if (result5 !== null) {
                    result6 = parse_rparen();
                    if (result6 !== null) {
                      result2 = [result4, result5, result6];
                    } else {
                      result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  result2 = null;
                  pos = savedPos1;
                }
                result3 = result2 !== null
                  ? (function(expression) { return expression; })(result2[1])
                  : null;
                if (result3 !== null) {
                  result1 = result3;
                } else {
                  result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  result0 = result1;
                } else {
                  result0 = null;
                }
              }
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_action() {
        var cacheKey = 'action@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        reportFailures++;
        savedPos0 = pos;
        savedPos1 = pos;
        result3 = parse_braced();
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(braced) { return braced.substr(1, braced.length - 2); })(result1[0])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("action");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_braced() {
        var cacheKey = 'braced@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          result3 = "{";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          result4 = [];
          result8 = parse_braced();
          if (result8 !== null) {
            result6 = result8;
          } else {
            result7 = parse_nonBraceCharacter();
            if (result7 !== null) {
              result6 = result7;
            } else {
              result6 = null;
            }
          }
          while (result6 !== null) {
            result4.push(result6);
            result8 = parse_braced();
            if (result8 !== null) {
              result6 = result8;
            } else {
              result7 = parse_nonBraceCharacter();
              if (result7 !== null) {
                result6 = result7;
              } else {
                result6 = null;
              }
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "}") {
              result5 = "}";
              pos += 1;
            } else {
              result5 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (result5 !== null) {
              result1 = [result3, result4, result5];
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(parts) {
                return "{" + parts.join("") + "}";
              })(result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonBraceCharacters() {
        var cacheKey = 'nonBraceCharacters@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var savedPos0;
        
        
        savedPos0 = pos;
        result3 = parse_nonBraceCharacter();
        if (result3 !== null) {
          result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            result3 = parse_nonBraceCharacter();
          }
        } else {
          result1 = null;
        }
        result2 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1)
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonBraceCharacter() {
        var cacheKey = 'nonBraceCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        
        
        if (input.substr(pos).match(/^[^{}]/) !== null) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[^{}]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equals() {
        var cacheKey = 'equals@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "=") {
          result3 = "=";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "="; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_colon() {
        var cacheKey = 'colon@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === ":") {
          result3 = ":";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return ":"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_semicolon() {
        var cacheKey = 'semicolon@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === ";") {
          result3 = ";";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return ";"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_slash() {
        var cacheKey = 'slash@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "/") {
          result3 = "/";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "/"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_and() {
        var cacheKey = 'and@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "&") {
          result3 = "&";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"&\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "&"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_not() {
        var cacheKey = 'not@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "!") {
          result3 = "!";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "!"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_question() {
        var cacheKey = 'question@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "?") {
          result3 = "?";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"?\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "?"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_star() {
        var cacheKey = 'star@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "*") {
          result3 = "*";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "*"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_plus() {
        var cacheKey = 'plus@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "+") {
          result3 = "+";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "+"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lparen() {
        var cacheKey = 'lparen@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          result3 = "(";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "("; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_rparen() {
        var cacheKey = 'rparen@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === ")") {
          result3 = ")";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\")\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return ")"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dot() {
        var cacheKey = 'dot@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === ".") {
          result3 = ".";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "."; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13;
        var savedPos0, savedPos1;
        
        reportFailures++;
        savedPos0 = pos;
        savedPos1 = pos;
        result13 = parse_letter();
        if (result13 !== null) {
          result3 = result13;
        } else {
          if (input.substr(pos, 1) === "_") {
            result12 = "_";
            pos += 1;
          } else {
            result12 = null;
            if (reportFailures === 0) {
              matchFailed("\"_\"");
            }
          }
          if (result12 !== null) {
            result3 = result12;
          } else {
            if (input.substr(pos, 1) === "$") {
              result11 = "$";
              pos += 1;
            } else {
              result11 = null;
              if (reportFailures === 0) {
                matchFailed("\"$\"");
              }
            }
            if (result11 !== null) {
              result3 = result11;
            } else {
              result3 = null;
            }
          }
        }
        if (result3 !== null) {
          result4 = [];
          result10 = parse_letter();
          if (result10 !== null) {
            result6 = result10;
          } else {
            result9 = parse_digit();
            if (result9 !== null) {
              result6 = result9;
            } else {
              if (input.substr(pos, 1) === "_") {
                result8 = "_";
                pos += 1;
              } else {
                result8 = null;
                if (reportFailures === 0) {
                  matchFailed("\"_\"");
                }
              }
              if (result8 !== null) {
                result6 = result8;
              } else {
                if (input.substr(pos, 1) === "$") {
                  result7 = "$";
                  pos += 1;
                } else {
                  result7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"$\"");
                  }
                }
                if (result7 !== null) {
                  result6 = result7;
                } else {
                  result6 = null;
                }
              }
            }
          }
          while (result6 !== null) {
            result4.push(result6);
            result10 = parse_letter();
            if (result10 !== null) {
              result6 = result10;
            } else {
              result9 = parse_digit();
              if (result9 !== null) {
                result6 = result9;
              } else {
                if (input.substr(pos, 1) === "_") {
                  result8 = "_";
                  pos += 1;
                } else {
                  result8 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"_\"");
                  }
                }
                if (result8 !== null) {
                  result6 = result8;
                } else {
                  if (input.substr(pos, 1) === "$") {
                    result7 = "$";
                    pos += 1;
                  } else {
                    result7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"$\"");
                    }
                  }
                  if (result7 !== null) {
                    result6 = result7;
                  } else {
                    result6 = null;
                  }
                }
              }
            }
          }
          if (result4 !== null) {
            result5 = parse___();
            if (result5 !== null) {
              result1 = [result3, result4, result5];
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(head, tail) {
                return head + tail.join("");
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("identifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_literal() {
        var cacheKey = 'literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var savedPos0, savedPos1;
        
        reportFailures++;
        savedPos0 = pos;
        savedPos1 = pos;
        result6 = parse_doubleQuotedLiteral();
        if (result6 !== null) {
          result3 = result6;
        } else {
          result5 = parse_singleQuotedLiteral();
          if (result5 !== null) {
            result3 = result5;
          } else {
            result3 = null;
          }
        }
        if (result3 !== null) {
          result4 = parse___();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(literal) { return literal; })(result1[0])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("literal");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_doubleQuotedLiteral() {
        var cacheKey = 'doubleQuotedLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          result3 = "\"";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          result4 = [];
          result6 = parse_doubleQuotedCharacter();
          while (result6 !== null) {
            result4.push(result6);
            result6 = parse_doubleQuotedCharacter();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              result5 = "\"";
              pos += 1;
            } else {
              result5 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              result1 = [result3, result4, result5];
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_doubleQuotedCharacter() {
        var cacheKey = 'doubleQuotedCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        
        
        
        result6 = parse_simpleDoubleQuotedCharacter();
        if (result6 !== null) {
          result0 = result6;
        } else {
          result5 = parse_simpleEscapeSequence();
          if (result5 !== null) {
            result0 = result5;
          } else {
            result4 = parse_zeroEscapeSequence();
            if (result4 !== null) {
              result0 = result4;
            } else {
              result3 = parse_hexEscapeSequence();
              if (result3 !== null) {
                result0 = result3;
              } else {
                result2 = parse_unicodeEscapeSequence();
                if (result2 !== null) {
                  result0 = result2;
                } else {
                  result1 = parse_eolEscapeSequence();
                  if (result1 !== null) {
                    result0 = result1;
                  } else {
                    result0 = null;
                  }
                }
              }
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_simpleDoubleQuotedCharacter() {
        var cacheKey = 'simpleDoubleQuotedCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        savedPos2 = pos;
        reportFailures++;
        if (input.substr(pos, 1) === "\"") {
          result8 = "\"";
          pos += 1;
        } else {
          result8 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result8 !== null) {
          result5 = result8;
        } else {
          if (input.substr(pos, 1) === "\\") {
            result7 = "\\";
            pos += 1;
          } else {
            result7 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result7 !== null) {
            result5 = result7;
          } else {
            result6 = parse_eolChar();
            if (result6 !== null) {
              result5 = result6;
            } else {
              result5 = null;
            }
          }
        }
        reportFailures--;
        if (result5 === null) {
          result3 = '';
        } else {
          result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          if (input.length > pos) {
            result4 = input.charAt(pos);
            pos++;
          } else {
            result4 = null;
            if (reportFailures === 0) {
              matchFailed('any character');
            }
          }
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(char_) { return char_; })(result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_singleQuotedLiteral() {
        var cacheKey = 'singleQuotedLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "'") {
          result3 = "'";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result3 !== null) {
          result4 = [];
          result6 = parse_singleQuotedCharacter();
          while (result6 !== null) {
            result4.push(result6);
            result6 = parse_singleQuotedCharacter();
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "'") {
              result5 = "'";
              pos += 1;
            } else {
              result5 = null;
              if (reportFailures === 0) {
                matchFailed("\"'\"");
              }
            }
            if (result5 !== null) {
              result1 = [result3, result4, result5];
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_singleQuotedCharacter() {
        var cacheKey = 'singleQuotedCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        
        
        
        result6 = parse_simpleSingleQuotedCharacter();
        if (result6 !== null) {
          result0 = result6;
        } else {
          result5 = parse_simpleEscapeSequence();
          if (result5 !== null) {
            result0 = result5;
          } else {
            result4 = parse_zeroEscapeSequence();
            if (result4 !== null) {
              result0 = result4;
            } else {
              result3 = parse_hexEscapeSequence();
              if (result3 !== null) {
                result0 = result3;
              } else {
                result2 = parse_unicodeEscapeSequence();
                if (result2 !== null) {
                  result0 = result2;
                } else {
                  result1 = parse_eolEscapeSequence();
                  if (result1 !== null) {
                    result0 = result1;
                  } else {
                    result0 = null;
                  }
                }
              }
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_simpleSingleQuotedCharacter() {
        var cacheKey = 'simpleSingleQuotedCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        savedPos2 = pos;
        reportFailures++;
        if (input.substr(pos, 1) === "'") {
          result8 = "'";
          pos += 1;
        } else {
          result8 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result8 !== null) {
          result5 = result8;
        } else {
          if (input.substr(pos, 1) === "\\") {
            result7 = "\\";
            pos += 1;
          } else {
            result7 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result7 !== null) {
            result5 = result7;
          } else {
            result6 = parse_eolChar();
            if (result6 !== null) {
              result5 = result6;
            } else {
              result5 = null;
            }
          }
        }
        reportFailures--;
        if (result5 === null) {
          result3 = '';
        } else {
          result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          if (input.length > pos) {
            result4 = input.charAt(pos);
            pos++;
          } else {
            result4 = null;
            if (reportFailures === 0) {
              matchFailed('any character');
            }
          }
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(char_) { return char_; })(result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_class() {
        var cacheKey = 'class@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11;
        var savedPos0, savedPos1;
        
        reportFailures++;
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "[") {
          result3 = "[";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "^") {
            result11 = "^";
            pos += 1;
          } else {
            result11 = null;
            if (reportFailures === 0) {
              matchFailed("\"^\"");
            }
          }
          result4 = result11 !== null ? result11 : '';
          if (result4 !== null) {
            result5 = [];
            result10 = parse_classCharacterRange();
            if (result10 !== null) {
              result8 = result10;
            } else {
              result9 = parse_classCharacter();
              if (result9 !== null) {
                result8 = result9;
              } else {
                result8 = null;
              }
            }
            while (result8 !== null) {
              result5.push(result8);
              result10 = parse_classCharacterRange();
              if (result10 !== null) {
                result8 = result10;
              } else {
                result9 = parse_classCharacter();
                if (result9 !== null) {
                  result8 = result9;
                } else {
                  result8 = null;
                }
              }
            }
            if (result5 !== null) {
              if (input.substr(pos, 1) === "]") {
                result6 = "]";
                pos += 1;
              } else {
                result6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"]\"");
                }
              }
              if (result6 !== null) {
                result7 = parse___();
                if (result7 !== null) {
                  result1 = [result3, result4, result5, result6, result7];
                } else {
                  result1 = null;
                  pos = savedPos1;
                }
              } else {
                result1 = null;
                pos = savedPos1;
              }
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(inverted, parts) {
                var partsConverted = parts.map(function(part) { return part.data; });
                var rawText = "["
                  + inverted
                  + parts.map(function(part) { return part.rawText; }).join("")
                  + "]";
          
                return {
                  type:     "class",
                  inverted: inverted === "^",
                  parts:    partsConverted,
                  // FIXME: Get the raw text from the input directly.
                  rawText:  rawText
                };
              })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("character class");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_classCharacterRange() {
        var cacheKey = 'classCharacterRange@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        result3 = parse_classCharacter();
        if (result3 !== null) {
          if (input.substr(pos, 1) === "-") {
            result4 = "-";
            pos += 1;
          } else {
            result4 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result4 !== null) {
            result5 = parse_classCharacter();
            if (result5 !== null) {
              result1 = [result3, result4, result5];
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(begin, end) {
                if (begin.data.charCodeAt(0) > end.data.charCodeAt(0)) {
                  throw new this.SyntaxError(
                    "Invalid character range: " + begin.rawText + "-" + end.rawText + "."
                  );
                }
          
                return {
                  data:    [begin.data, end.data],
                  // FIXME: Get the raw text from the input directly.
                  rawText: begin.rawText + "-" + end.rawText
                };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_classCharacter() {
        var cacheKey = 'classCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var savedPos0;
        
        
        savedPos0 = pos;
        result1 = parse_bracketDelimitedCharacter();
        result2 = result1 !== null
          ? (function(char_) {
                return {
                  data:    char_,
                  // FIXME: Get the raw text from the input directly.
                  rawText: quoteForRegexpClass(char_)
                };
              })(result1)
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bracketDelimitedCharacter() {
        var cacheKey = 'bracketDelimitedCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        
        
        
        result6 = parse_simpleBracketDelimitedCharacter();
        if (result6 !== null) {
          result0 = result6;
        } else {
          result5 = parse_simpleEscapeSequence();
          if (result5 !== null) {
            result0 = result5;
          } else {
            result4 = parse_zeroEscapeSequence();
            if (result4 !== null) {
              result0 = result4;
            } else {
              result3 = parse_hexEscapeSequence();
              if (result3 !== null) {
                result0 = result3;
              } else {
                result2 = parse_unicodeEscapeSequence();
                if (result2 !== null) {
                  result0 = result2;
                } else {
                  result1 = parse_eolEscapeSequence();
                  if (result1 !== null) {
                    result0 = result1;
                  } else {
                    result0 = null;
                  }
                }
              }
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_simpleBracketDelimitedCharacter() {
        var cacheKey = 'simpleBracketDelimitedCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        savedPos2 = pos;
        reportFailures++;
        if (input.substr(pos, 1) === "]") {
          result8 = "]";
          pos += 1;
        } else {
          result8 = null;
          if (reportFailures === 0) {
            matchFailed("\"]\"");
          }
        }
        if (result8 !== null) {
          result5 = result8;
        } else {
          if (input.substr(pos, 1) === "\\") {
            result7 = "\\";
            pos += 1;
          } else {
            result7 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result7 !== null) {
            result5 = result7;
          } else {
            result6 = parse_eolChar();
            if (result6 !== null) {
              result5 = result6;
            } else {
              result5 = null;
            }
          }
        }
        reportFailures--;
        if (result5 === null) {
          result3 = '';
        } else {
          result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          if (input.length > pos) {
            result4 = input.charAt(pos);
            pos++;
          } else {
            result4 = null;
            if (reportFailures === 0) {
              matchFailed('any character');
            }
          }
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(char_) { return char_; })(result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_simpleEscapeSequence() {
        var cacheKey = 'simpleEscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "\\") {
          result3 = "\\";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result3 !== null) {
          savedPos2 = pos;
          reportFailures++;
          result10 = parse_digit();
          if (result10 !== null) {
            result6 = result10;
          } else {
            if (input.substr(pos, 1) === "x") {
              result9 = "x";
              pos += 1;
            } else {
              result9 = null;
              if (reportFailures === 0) {
                matchFailed("\"x\"");
              }
            }
            if (result9 !== null) {
              result6 = result9;
            } else {
              if (input.substr(pos, 1) === "u") {
                result8 = "u";
                pos += 1;
              } else {
                result8 = null;
                if (reportFailures === 0) {
                  matchFailed("\"u\"");
                }
              }
              if (result8 !== null) {
                result6 = result8;
              } else {
                result7 = parse_eolChar();
                if (result7 !== null) {
                  result6 = result7;
                } else {
                  result6 = null;
                }
              }
            }
          }
          reportFailures--;
          if (result6 === null) {
            result4 = '';
          } else {
            result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            if (input.length > pos) {
              result5 = input.charAt(pos);
              pos++;
            } else {
              result5 = null;
              if (reportFailures === 0) {
                matchFailed('any character');
              }
            }
            if (result5 !== null) {
              result1 = [result3, result4, result5];
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(char_) {
                return char_
                  .replace("b", "\b")
                  .replace("f", "\f")
                  .replace("n", "\n")
                  .replace("r", "\r")
                  .replace("t", "\t")
                  .replace("v", "\x0B") // IE does not recognize "\v".
                ;
              })(result1[2])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_zeroEscapeSequence() {
        var cacheKey = 'zeroEscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 2) === "\\0") {
          result3 = "\\0";
          pos += 2;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\0\"");
          }
        }
        if (result3 !== null) {
          savedPos2 = pos;
          reportFailures++;
          result5 = parse_digit();
          reportFailures--;
          if (result5 === null) {
            result4 = '';
          } else {
            result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function() { return "\x00"; })()
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hexEscapeSequence() {
        var cacheKey = 'hexEscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 2) === "\\x") {
          result3 = "\\x";
          pos += 2;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\x\"");
          }
        }
        if (result3 !== null) {
          result4 = parse_hexDigit();
          if (result4 !== null) {
            result5 = parse_hexDigit();
            if (result5 !== null) {
              result1 = [result3, result4, result5];
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(h1, h2) {
                return String.fromCharCode(parseInt(h1 + h2, 16));
              })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unicodeEscapeSequence() {
        var cacheKey = 'unicodeEscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 2) === "\\u") {
          result3 = "\\u";
          pos += 2;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\u\"");
          }
        }
        if (result3 !== null) {
          result4 = parse_hexDigit();
          if (result4 !== null) {
            result5 = parse_hexDigit();
            if (result5 !== null) {
              result6 = parse_hexDigit();
              if (result6 !== null) {
                result7 = parse_hexDigit();
                if (result7 !== null) {
                  result1 = [result3, result4, result5, result6, result7];
                } else {
                  result1 = null;
                  pos = savedPos1;
                }
              } else {
                result1 = null;
                pos = savedPos1;
              }
            } else {
              result1 = null;
              pos = savedPos1;
            }
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(h1, h2, h3, h4) {
                return String.fromCharCode(parseInt(h1 + h2 + h3 + h4, 16));
              })(result1[1], result1[2], result1[3], result1[4])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_eolEscapeSequence() {
        var cacheKey = 'eolEscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var savedPos0, savedPos1;
        
        
        savedPos0 = pos;
        savedPos1 = pos;
        if (input.substr(pos, 1) === "\\") {
          result3 = "\\";
          pos += 1;
        } else {
          result3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result3 !== null) {
          result4 = parse_eol();
          if (result4 !== null) {
            result1 = [result3, result4];
          } else {
            result1 = null;
            pos = savedPos1;
          }
        } else {
          result1 = null;
          pos = savedPos1;
        }
        result2 = result1 !== null
          ? (function(eol) { return eol; })(result1[1])
          : null;
        if (result2 !== null) {
          result0 = result2;
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_digit() {
        var cacheKey = 'digit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hexDigit() {
        var cacheKey = 'hexDigit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        
        
        if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_letter() {
        var cacheKey = 'letter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        
        
        
        result2 = parse_lowerCaseLetter();
        if (result2 !== null) {
          result0 = result2;
        } else {
          result1 = parse_upperCaseLetter();
          if (result1 !== null) {
            result0 = result1;
          } else {
            result0 = null;
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lowerCaseLetter() {
        var cacheKey = 'lowerCaseLetter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        
        
        if (input.substr(pos).match(/^[a-z]/) !== null) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_upperCaseLetter() {
        var cacheKey = 'upperCaseLetter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        
        
        if (input.substr(pos).match(/^[A-Z]/) !== null) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = '__@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        
        
        
        result0 = [];
        result4 = parse_whitespace();
        if (result4 !== null) {
          result1 = result4;
        } else {
          result3 = parse_eol();
          if (result3 !== null) {
            result1 = result3;
          } else {
            result2 = parse_comment();
            if (result2 !== null) {
              result1 = result2;
            } else {
              result1 = null;
            }
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          result4 = parse_whitespace();
          if (result4 !== null) {
            result1 = result4;
          } else {
            result3 = parse_eol();
            if (result3 !== null) {
              result1 = result3;
            } else {
              result2 = parse_comment();
              if (result2 !== null) {
                result1 = result2;
              } else {
                result1 = null;
              }
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        
        
        reportFailures++;
        result2 = parse_singleLineComment();
        if (result2 !== null) {
          result0 = result2;
        } else {
          result1 = parse_multiLineComment();
          if (result1 !== null) {
            result0 = result1;
          } else {
            result0 = null;
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("comment");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_singleLineComment() {
        var cacheKey = 'singleLineComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos0 = pos;
        if (input.substr(pos, 2) === "//") {
          result1 = "//";
          pos += 2;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (result1 !== null) {
          result2 = [];
          savedPos1 = pos;
          savedPos2 = pos;
          reportFailures++;
          result6 = parse_eolChar();
          reportFailures--;
          if (result6 === null) {
            result4 = '';
          } else {
            result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            if (input.length > pos) {
              result5 = input.charAt(pos);
              pos++;
            } else {
              result5 = null;
              if (reportFailures === 0) {
                matchFailed('any character');
              }
            }
            if (result5 !== null) {
              result3 = [result4, result5];
            } else {
              result3 = null;
              pos = savedPos1;
            }
          } else {
            result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            savedPos1 = pos;
            savedPos2 = pos;
            reportFailures++;
            result6 = parse_eolChar();
            reportFailures--;
            if (result6 === null) {
              result4 = '';
            } else {
              result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.length > pos) {
                result5 = input.charAt(pos);
                pos++;
              } else {
                result5 = null;
                if (reportFailures === 0) {
                  matchFailed('any character');
                }
              }
              if (result5 !== null) {
                result3 = [result4, result5];
              } else {
                result3 = null;
                pos = savedPos1;
              }
            } else {
              result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            result0 = [result1, result2];
          } else {
            result0 = null;
            pos = savedPos0;
          }
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiLineComment() {
        var cacheKey = 'multiLineComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var savedPos0, savedPos1, savedPos2;
        
        
        savedPos0 = pos;
        if (input.substr(pos, 2) === "/*") {
          result1 = "/*";
          pos += 2;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result1 !== null) {
          result2 = [];
          savedPos1 = pos;
          savedPos2 = pos;
          reportFailures++;
          if (input.substr(pos, 2) === "*/") {
            result7 = "*/";
            pos += 2;
          } else {
            result7 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result7 === null) {
            result5 = '';
          } else {
            result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            if (input.length > pos) {
              result6 = input.charAt(pos);
              pos++;
            } else {
              result6 = null;
              if (reportFailures === 0) {
                matchFailed('any character');
              }
            }
            if (result6 !== null) {
              result4 = [result5, result6];
            } else {
              result4 = null;
              pos = savedPos1;
            }
          } else {
            result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result2.push(result4);
            savedPos1 = pos;
            savedPos2 = pos;
            reportFailures++;
            if (input.substr(pos, 2) === "*/") {
              result7 = "*/";
              pos += 2;
            } else {
              result7 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (result7 === null) {
              result5 = '';
            } else {
              result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              if (input.length > pos) {
                result6 = input.charAt(pos);
                pos++;
              } else {
                result6 = null;
                if (reportFailures === 0) {
                  matchFailed('any character');
                }
              }
              if (result6 !== null) {
                result4 = [result5, result6];
              } else {
                result4 = null;
                pos = savedPos1;
              }
            } else {
              result4 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 2) === "*/") {
              result3 = "*/";
              pos += 2;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (result3 !== null) {
              result0 = [result1, result2, result3];
            } else {
              result0 = null;
              pos = savedPos0;
            }
          } else {
            result0 = null;
            pos = savedPos0;
          }
        } else {
          result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_eol() {
        var cacheKey = 'eol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        
        
        reportFailures++;
        if (input.substr(pos, 1) === "\n") {
          result5 = "\n";
          pos += 1;
        } else {
          result5 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (result5 !== null) {
          result0 = result5;
        } else {
          if (input.substr(pos, 2) === "\r\n") {
            result4 = "\r\n";
            pos += 2;
          } else {
            result4 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result4 !== null) {
            result0 = result4;
          } else {
            if (input.substr(pos, 1) === "\r") {
              result3 = "\r";
              pos += 1;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
            if (result3 !== null) {
              result0 = result3;
            } else {
              if (input.substr(pos, 1) === "\u2028") {
                result2 = "\u2028";
                pos += 1;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\u2028\"");
                }
              }
              if (result2 !== null) {
                result0 = result2;
              } else {
                if (input.substr(pos, 1) === "\u2029") {
                  result1 = "\u2029";
                  pos += 1;
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\u2029\"");
                  }
                }
                if (result1 !== null) {
                  result0 = result1;
                } else {
                  result0 = null;
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("end of line");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_eolChar() {
        var cacheKey = 'eolChar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        
        
        if (input.substr(pos).match(/^[\n\r\u2028\u2029]/) !== null) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = 'whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var result0;
        
        
        reportFailures++;
        if (input.substr(pos).match(/^[ \t\x0B\f\xA0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000]/) !== null) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t\\x0B\\f\\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]");
          }
        }
        reportFailures--;
        if (reportFailures === 0 && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      if (startRule !== undefined && startRule !== "grammar") {
        throw new Error("Invalid rule name: " + quote(startRule) + ".");
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostFailuresExpected);
        var actualPos = Math.max(pos, rightmostFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' || ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parse_grammar();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
